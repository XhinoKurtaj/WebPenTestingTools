import requests
from threading import Thread
import sys
import getopt
import time
import re
import hashlib

from selenium.webdriver.chrome.options import Options
from termcolor import colored
from selenium import webdriver


def banner():
    print("\n***************************************")
    print("* ForzaBruta 0.5*")
    print("***************************************")


def usage():
    print("Usage:")
    print("         -w: url (http://somesite.com/FUZZ)")
    print("         -t: threads")
    print("         -f: dictionary file\n")
    print("example: forzabruta.py -w http://www.targetsite.com/FUZZ -t 5 -f common.txt\n")


class RequestPerformer(Thread):
    def __init__(self, word, url, hidecode, payload):
        Thread.__init__(self)
        self.word = word.split("\n")[0]
        self.url = url.replace('FUZZ', self.word)
        if payload != "":
            self.payload = payload.replace('FUZZ', self.word)
        else:
            self.payload = payload
        self.hidecode = hidecode

    def run(self):
        try:
            start_time = time.time()
            if self.payload == "":
                r = requests.get(self.url)
                elapse_time = time.time()
                total_time = str(elapse_time - start_time)[1:10]
            else:
                payload_list = self.payload.replace("=", " ").replace("&", " ").split(" ")
                payload = dict([(k, v) for k, v in zip(payload_list[::2], payload_list[1::2])])
                r = requests.post(self.url, data=payload)
                elapse_time = time.time()
                total_time = str(elapse_time - start_time)[1:10]

            decode: str = r.content.decode('utf-8')
            lines: str = str(decode.count("\n"))
            chars: str = str(decode.__len__())
            words: str = str(re.findall("\S+", decode).__len__())
            code: str = str(r.status_code)
            hash_content = hashlib.md5(r.content).hexdigest()

            if r.history:
                first = r.history[0]
                code = str(first.status_code)
            else:
                pass

            if self.hidecode != code:
                if '200' <= code < '300':
                    options = Options()
                    options.add_argument('--headless')
                    options.add_argument('--disable-gpu')  # Last I checked this was necessary.
                    driver = webdriver.Chrome('./chromedriver', options=options)
                    time.sleep(2)
                    driver.set_window_size(1024, 768)
                    driver.get(self.url)
                    driver.save_screenshot(f"images/{self.word}.png")
                    print(total_time + "\t" + colored(code, 'green') + "\t" + chars + "\t" + words + "\t " + lines + "\t" + hash_content + "\t" + self.word)
                elif '400' <= code < '500':
                    print(total_time + "\t" + colored(code, 'red') + "\t" + chars + " \t" + words + "\t " + lines + "\t" + hash_content + "\t" + self.word)
                elif '300' <= code < '400':
                    print(total_time + "\t" + colored(code, 'blue') + "\t" + chars + "\t" + words + "\t " + lines + "\t" + hash_content + "\t" + self.word)
                else:
                    print(total_time + "\t" + colored(code, 'yellow') + "\t" + chars + "\t" + words + "\t " + lines + "\t" + hash_content + "\t" + self.word)
            else:
                pass
            i[0] = i[0] - 1  # Here we remove one thread from the counter
        except Exception as e:
            print(e)


def start(argv):
    banner()
    if len(sys.argv) < 5:
        usage()
        sys.exit()
    try:
        opts, args = getopt.getopt(argv, "w:f:t:c:")
    except getopt.GetoptError:
        print("Error en arguments")
        sys.exit()

    hidecode = 000
    for opt, arg in opts:
        if opt == '-w':
            url = arg
        elif opt == '-f':
            dict_list = arg
        elif opt == '-t':
            threads = arg
        elif opt == '-c':
            hidecode = arg
    try:
        f = open(dict_list, "r")
        words = f.readlines()
    except:
        print(f"Failed opening file: {dict_list}\n")
        sys.exit()
    launcher_thread(words, threads, url, hidecode)


def launcher_thread(names, th, url, hidecode):
    global i, thread
    i = []
    resultlist = []
    i.append(0)
    print(
        "-------------------------------------------------------------------------------------------------------------")
    print("Time" + "\t\t\t" + "Code" + "\tChars \t Words \tLines \t MD5 \t\t\t\t\t String")
    print(
        "-------------------------------------------------------------------------------------------------------------")
    while len(names):
        try:
            if int(i[0]) < int(th):
                n = names.pop(0)
                i[0] = i[0] + 1
                thread = RequestPerformer(n, url, hidecode)
                thread.start()

        except KeyboardInterrupt:
            print("ForzaBruta interrupted  by user. Finishing attack..")
            sys.exit()
        thread.join()
    return


if __name__ == "__main__":
    try:
        start(sys.argv[1:])
    except KeyboardInterrupt:
        print
        "ForzaBruta interrupted by user, killing all threads..!!"
